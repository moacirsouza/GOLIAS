# This image was created using the following tutorial:
# http://tleyden.github.io/blog/2014/11/04/coreos-with-nvidia-cuda-gpu-drivers/

### NOTE: There's not CUDA toolkit (https://developer.nvidia.com/cuda-toolkit)
### available for Ubuntu 14.04, therefore, I'll be using version 18.04 here

# NVIDIA suggests you to use ubuntu:14.04 (See the NOTE above)
FROM ubuntu:18.04

# Getting the kernel version of the host machine
ARG HOST_KERNEL_VERSION

### NOTE: In the tleyden article he used the 4.7 version for gcc and g++, but
### there are no ppc packages candidates for this version in the repositories,
### so I changed it to 4.8

# Installing Ubuntu dependencies (See the NOTE above)
RUN apt-get update && apt-get install -y \
    gcc-4.8 \
    g++-4.8 \
    wget \
    git \
    make \
    dpkg-dev \
    kmod \
    libxml2

# Preparing the environment to use the correct GCC version
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 0 \
    --slave /usr/bin/g++ g++ /usr/bin/g++-4.8

# COPY cuda_10.1.168_418.67_linux_ppc64le.run /opt/cuda_10.1.168_418.67_linux_ppc64le.run

# RUN dpkg -i /opt/cuda-repo-ubuntu1804-10-1-local-10.1.168-418.67_1.0-1_ppc64el.deb

# --------------------

### TODO: This code was used to build the CoreOS kernel in the DELL version,
### I still have to check and see if it works for the IBM machine 

# Getting the right kernel headers for the system
#RUN mkdir -p /usr/src/kernels && \
#    cd /usr/src/kernels && \
#    git init && \
#    git remote add -f -t $HOST_KERNEL_VERSION origin https://github.com/coreos/linux.git
